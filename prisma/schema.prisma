datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")   
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}
 
generator client {
  provider        = "prisma-client-js"
}
 
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  locations     Location[]
  types         Type[]
 engins         Engin[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 

// Définition de la table Type
model Type {
  id         String    @id @default(cuid())
  slug       String  @unique
  image      String?
  name       String 

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  
 
  engin     Engin[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Définition de la table Engin
model Engin {
  id            String    @id @default(cuid())
  image         String?
  registration String   
  frais         Float?
  state         String?

  typeId  String
  type   Type  @relation(fields: [typeId], references: [id], onDelete: Cascade)
 
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Définition de la table Location
model Location {
  id              String    @id @default(cuid())
  firstname       String
  lastname        String?
  phone           String?
  businessName    String?
  businessAdress  String?
  nbrEngin        Int?
  dateDebut       DateTime?
  dateFin         DateTime?
  typeId          String
  enginId         String
  payement        String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Définition de la table Facture
model Facture {
  logo    String?
  factId  String     @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}